#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum KeywordAction {
    Abandon,
    Activate,
    Adapt,
    Amass,
    Assemble,
    Attach,
    Bolster,
    Cast,
    Clash,
    Cloak,
    CollectEvidence,
    Conjure,
    Connive,
    Convert,
    Counter,
    Create,
    Destroy,
    Detain,
    Discard,
    Discover,
    Double,
    Exchange,
    Exert,
    Exile,
    Explore,
    Fateseal,
    Fight,
    Food,
    Forage,
    Goad,
    Incubate,
    Investigate,
    Learn,
    Manifest,
    ManifestDread,
    Meld,
    Mill,
    Monstrosity,
    OpenAnAttraction,
    Planeswalk,
    Play,
    Plot,
    Populate,
    Proliferate,
    Regenerate,
    Reveal,
    RoleToken,
    RollToVisitYourAttractions,
    Sacrifice,
    Scry,
    Seek,
    SetInMotion,
    Shuffle,
    Support,
    Surveil,
    Suspect,
    Tap,
    TimeTravel,
    Transform,
    Treasure,
    Untap,
    VentureIntoTheDungeon,
    Vote,
}

impl std::str::FromStr for KeywordAction {
    type Err = crate::ParsingError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Abandon" => Ok(Self::Abandon),
            "Activate" => Ok(Self::Activate),
            "Adapt" => Ok(Self::Adapt),
            "Amass" => Ok(Self::Amass),
            "Assemble" => Ok(Self::Assemble),
            "Attach" => Ok(Self::Attach),
            "Bolster" => Ok(Self::Bolster),
            "Cast" => Ok(Self::Cast),
            "Clash" => Ok(Self::Clash),
            "Cloak" => Ok(Self::Cloak),
            "Collect evidence" => Ok(Self::CollectEvidence),
            "Conjure" => Ok(Self::Conjure),
            "Connive" => Ok(Self::Connive),
            "Convert" => Ok(Self::Convert),
            "Counter" => Ok(Self::Counter),
            "Create" => Ok(Self::Create),
            "Destroy" => Ok(Self::Destroy),
            "Detain" => Ok(Self::Detain),
            "Discard" => Ok(Self::Discard),
            "Discover" => Ok(Self::Discover),
            "Double" => Ok(Self::Double),
            "Exchange" => Ok(Self::Exchange),
            "Exert" => Ok(Self::Exert),
            "Exile" => Ok(Self::Exile),
            "Explore" => Ok(Self::Explore),
            "Fateseal" => Ok(Self::Fateseal),
            "Fight" => Ok(Self::Fight),
            "Food" => Ok(Self::Food),
            "Forage" => Ok(Self::Forage),
            "Goad" => Ok(Self::Goad),
            "Incubate" => Ok(Self::Incubate),
            "Investigate" => Ok(Self::Investigate),
            "Learn" => Ok(Self::Learn),
            "Manifest" => Ok(Self::Manifest),
            "Manifest dread" => Ok(Self::ManifestDread),
            "Meld" => Ok(Self::Meld),
            "Mill" => Ok(Self::Mill),
            "Monstrosity" => Ok(Self::Monstrosity),
            "Open an Attraction" => Ok(Self::OpenAnAttraction),
            "Planeswalk" => Ok(Self::Planeswalk),
            "Play" => Ok(Self::Play),
            "Plot" => Ok(Self::Plot),
            "Populate" => Ok(Self::Populate),
            "Proliferate" => Ok(Self::Proliferate),
            "Regenerate" => Ok(Self::Regenerate),
            "Reveal" => Ok(Self::Reveal),
            "Role token" => Ok(Self::RoleToken),
            "Roll to Visit Your Attractions" => Ok(Self::RollToVisitYourAttractions),
            "Sacrifice" => Ok(Self::Sacrifice),
            "Scry" => Ok(Self::Scry),
            "Seek" => Ok(Self::Seek),
            "Set in motion" => Ok(Self::SetInMotion),
            "Shuffle" => Ok(Self::Shuffle),
            "Support" => Ok(Self::Support),
            "Surveil" => Ok(Self::Surveil),
            "Suspect" => Ok(Self::Suspect),
            "Tap" => Ok(Self::Tap),
            "Time Travel" => Ok(Self::TimeTravel),
            "Transform" => Ok(Self::Transform),
            "Treasure" => Ok(Self::Treasure),
            "Untap" => Ok(Self::Untap),
            "Venture into the dungeon" => Ok(Self::VentureIntoTheDungeon),
            "Vote" => Ok(Self::Vote),
            _ => Err(crate::ParsingError::UnknownInput { input: s.to_string() }),
        }
    }
}

impl std::fmt::Display for KeywordAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            Self::Abandon => write!(f, "Abandon"),
            Self::Activate => write!(f, "Activate"),
            Self::Adapt => write!(f, "Adapt"),
            Self::Amass => write!(f, "Amass"),
            Self::Assemble => write!(f, "Assemble"),
            Self::Attach => write!(f, "Attach"),
            Self::Bolster => write!(f, "Bolster"),
            Self::Cast => write!(f, "Cast"),
            Self::Clash => write!(f, "Clash"),
            Self::Cloak => write!(f, "Cloak"),
            Self::CollectEvidence => write!(f, "Collect evidence"),
            Self::Conjure => write!(f, "Conjure"),
            Self::Connive => write!(f, "Connive"),
            Self::Convert => write!(f, "Convert"),
            Self::Counter => write!(f, "Counter"),
            Self::Create => write!(f, "Create"),
            Self::Destroy => write!(f, "Destroy"),
            Self::Detain => write!(f, "Detain"),
            Self::Discard => write!(f, "Discard"),
            Self::Discover => write!(f, "Discover"),
            Self::Double => write!(f, "Double"),
            Self::Exchange => write!(f, "Exchange"),
            Self::Exert => write!(f, "Exert"),
            Self::Exile => write!(f, "Exile"),
            Self::Explore => write!(f, "Explore"),
            Self::Fateseal => write!(f, "Fateseal"),
            Self::Fight => write!(f, "Fight"),
            Self::Food => write!(f, "Food"),
            Self::Forage => write!(f, "Forage"),
            Self::Goad => write!(f, "Goad"),
            Self::Incubate => write!(f, "Incubate"),
            Self::Investigate => write!(f, "Investigate"),
            Self::Learn => write!(f, "Learn"),
            Self::Manifest => write!(f, "Manifest"),
            Self::ManifestDread => write!(f, "Manifest dread"),
            Self::Meld => write!(f, "Meld"),
            Self::Mill => write!(f, "Mill"),
            Self::Monstrosity => write!(f, "Monstrosity"),
            Self::OpenAnAttraction => write!(f, "Open an Attraction"),
            Self::Planeswalk => write!(f, "Planeswalk"),
            Self::Play => write!(f, "Play"),
            Self::Plot => write!(f, "Plot"),
            Self::Populate => write!(f, "Populate"),
            Self::Proliferate => write!(f, "Proliferate"),
            Self::Regenerate => write!(f, "Regenerate"),
            Self::Reveal => write!(f, "Reveal"),
            Self::RoleToken => write!(f, "Role token"),
            Self::RollToVisitYourAttractions => write!(f, "Roll to Visit Your Attractions"),
            Self::Sacrifice => write!(f, "Sacrifice"),
            Self::Scry => write!(f, "Scry"),
            Self::Seek => write!(f, "Seek"),
            Self::SetInMotion => write!(f, "Set in motion"),
            Self::Shuffle => write!(f, "Shuffle"),
            Self::Support => write!(f, "Support"),
            Self::Surveil => write!(f, "Surveil"),
            Self::Suspect => write!(f, "Suspect"),
            Self::Tap => write!(f, "Tap"),
            Self::TimeTravel => write!(f, "Time Travel"),
            Self::Transform => write!(f, "Transform"),
            Self::Treasure => write!(f, "Treasure"),
            Self::Untap => write!(f, "Untap"),
            Self::VentureIntoTheDungeon => write!(f, "Venture into the dungeon"),
            Self::Vote => write!(f, "Vote"),
        }
    }
}

impl KeywordAction {
    pub fn iter() -> impl Iterator<Item = Self> {
        [
            Self::Abandon,
            Self::Activate,
            Self::Adapt,
            Self::Amass,
            Self::Assemble,
            Self::Attach,
            Self::Bolster,
            Self::Cast,
            Self::Clash,
            Self::Cloak,
            Self::CollectEvidence,
            Self::Conjure,
            Self::Connive,
            Self::Convert,
            Self::Counter,
            Self::Create,
            Self::Destroy,
            Self::Detain,
            Self::Discard,
            Self::Discover,
            Self::Double,
            Self::Exchange,
            Self::Exert,
            Self::Exile,
            Self::Explore,
            Self::Fateseal,
            Self::Fight,
            Self::Food,
            Self::Forage,
            Self::Goad,
            Self::Incubate,
            Self::Investigate,
            Self::Learn,
            Self::Manifest,
            Self::ManifestDread,
            Self::Meld,
            Self::Mill,
            Self::Monstrosity,
            Self::OpenAnAttraction,
            Self::Planeswalk,
            Self::Play,
            Self::Plot,
            Self::Populate,
            Self::Proliferate,
            Self::Regenerate,
            Self::Reveal,
            Self::RoleToken,
            Self::RollToVisitYourAttractions,
            Self::Sacrifice,
            Self::Scry,
            Self::Seek,
            Self::SetInMotion,
            Self::Shuffle,
            Self::Support,
            Self::Surveil,
            Self::Suspect,
            Self::Tap,
            Self::TimeTravel,
            Self::Transform,
            Self::Treasure,
            Self::Untap,
            Self::VentureIntoTheDungeon,
            Self::Vote,
        ].into_iter()
    }
}
