#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum KeywordAction {
    Abandon,
    Activate,
    Adapt,
    Amass,
    Assemble,
    Attach,
    Behold,
    Bolster,
    Cast,
    Clash,
    Cloak,
    CollectEvidence,
    Conjure,
    Connive,
    Convert,
    Counter,
    Create,
    Destroy,
    Detain,
    Discard,
    Discover,
    Double,
    Endure,
    Exchange,
    Exert,
    Exile,
    Explore,
    Fateseal,
    Fight,
    Food,
    Forage,
    Goad,
    Heist,
    Incubate,
    Investigate,
    Learn,
    Manifest,
    ManifestDread,
    Meld,
    Mill,
    Monstrosity,
    OpenAnAttraction,
    Planeswalk,
    Play,
    Plot,
    Populate,
    Proliferate,
    Regenerate,
    Reveal,
    RoleToken,
    RollToVisitYourAttractions,
    Sacrifice,
    Scry,
    Seek,
    SetInMotion,
    Shuffle,
    Support,
    Surveil,
    Suspect,
    Tap,
    TimeTravel,
    Transform,
    Treasure,
    Untap,
    VentureIntoTheDungeon,
    Vote,
}
impl std::str::FromStr for KeywordAction {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "abandon" => Ok(Self::Abandon),
            "activate" => Ok(Self::Activate),
            "adapt" => Ok(Self::Adapt),
            "amass" => Ok(Self::Amass),
            "assemble" => Ok(Self::Assemble),
            "attach" => Ok(Self::Attach),
            "behold" => Ok(Self::Behold),
            "bolster" => Ok(Self::Bolster),
            "cast" => Ok(Self::Cast),
            "clash" => Ok(Self::Clash),
            "cloak" => Ok(Self::Cloak),
            "collect evidence" => Ok(Self::CollectEvidence),
            "conjure" => Ok(Self::Conjure),
            "connive" => Ok(Self::Connive),
            "convert" => Ok(Self::Convert),
            "counter" => Ok(Self::Counter),
            "create" => Ok(Self::Create),
            "destroy" => Ok(Self::Destroy),
            "detain" => Ok(Self::Detain),
            "discard" => Ok(Self::Discard),
            "discover" => Ok(Self::Discover),
            "double" => Ok(Self::Double),
            "endure" => Ok(Self::Endure),
            "exchange" => Ok(Self::Exchange),
            "exert" => Ok(Self::Exert),
            "exile" => Ok(Self::Exile),
            "explore" => Ok(Self::Explore),
            "fateseal" => Ok(Self::Fateseal),
            "fight" => Ok(Self::Fight),
            "food" => Ok(Self::Food),
            "forage" => Ok(Self::Forage),
            "goad" => Ok(Self::Goad),
            "heist" => Ok(Self::Heist),
            "incubate" => Ok(Self::Incubate),
            "investigate" => Ok(Self::Investigate),
            "learn" => Ok(Self::Learn),
            "manifest" => Ok(Self::Manifest),
            "manifest dread" => Ok(Self::ManifestDread),
            "meld" => Ok(Self::Meld),
            "mill" => Ok(Self::Mill),
            "monstrosity" => Ok(Self::Monstrosity),
            "open an attraction" => Ok(Self::OpenAnAttraction),
            "planeswalk" => Ok(Self::Planeswalk),
            "play" => Ok(Self::Play),
            "plot" => Ok(Self::Plot),
            "populate" => Ok(Self::Populate),
            "proliferate" => Ok(Self::Proliferate),
            "regenerate" => Ok(Self::Regenerate),
            "reveal" => Ok(Self::Reveal),
            "role token" => Ok(Self::RoleToken),
            "roll to visit your attractions" => Ok(Self::RollToVisitYourAttractions),
            "sacrifice" => Ok(Self::Sacrifice),
            "scry" => Ok(Self::Scry),
            "seek" => Ok(Self::Seek),
            "set in motion" => Ok(Self::SetInMotion),
            "shuffle" => Ok(Self::Shuffle),
            "support" => Ok(Self::Support),
            "surveil" => Ok(Self::Surveil),
            "suspect" => Ok(Self::Suspect),
            "tap" => Ok(Self::Tap),
            "time travel" => Ok(Self::TimeTravel),
            "transform" => Ok(Self::Transform),
            "treasure" => Ok(Self::Treasure),
            "untap" => Ok(Self::Untap),
            "venture into the dungeon" => Ok(Self::VentureIntoTheDungeon),
            "vote" => Ok(Self::Vote),
            other => Err(format!("Unknown KeywordAction: {}", other.to_string())),
        }
    }
}
impl KeywordAction {
    fn as_str(&self) -> &'static str {
        match self {
            Self::Abandon => "abandon",
            Self::Activate => "activate",
            Self::Adapt => "adapt",
            Self::Amass => "amass",
            Self::Assemble => "assemble",
            Self::Attach => "attach",
            Self::Behold => "behold",
            Self::Bolster => "bolster",
            Self::Cast => "cast",
            Self::Clash => "clash",
            Self::Cloak => "cloak",
            Self::CollectEvidence => "collect evidence",
            Self::Conjure => "conjure",
            Self::Connive => "connive",
            Self::Convert => "convert",
            Self::Counter => "counter",
            Self::Create => "create",
            Self::Destroy => "destroy",
            Self::Detain => "detain",
            Self::Discard => "discard",
            Self::Discover => "discover",
            Self::Double => "double",
            Self::Endure => "endure",
            Self::Exchange => "exchange",
            Self::Exert => "exert",
            Self::Exile => "exile",
            Self::Explore => "explore",
            Self::Fateseal => "fateseal",
            Self::Fight => "fight",
            Self::Food => "food",
            Self::Forage => "forage",
            Self::Goad => "goad",
            Self::Heist => "heist",
            Self::Incubate => "incubate",
            Self::Investigate => "investigate",
            Self::Learn => "learn",
            Self::Manifest => "manifest",
            Self::ManifestDread => "manifest dread",
            Self::Meld => "meld",
            Self::Mill => "mill",
            Self::Monstrosity => "monstrosity",
            Self::OpenAnAttraction => "open an attraction",
            Self::Planeswalk => "planeswalk",
            Self::Play => "play",
            Self::Plot => "plot",
            Self::Populate => "populate",
            Self::Proliferate => "proliferate",
            Self::Regenerate => "regenerate",
            Self::Reveal => "reveal",
            Self::RoleToken => "role token",
            Self::RollToVisitYourAttractions => "roll to visit your attractions",
            Self::Sacrifice => "sacrifice",
            Self::Scry => "scry",
            Self::Seek => "seek",
            Self::SetInMotion => "set in motion",
            Self::Shuffle => "shuffle",
            Self::Support => "support",
            Self::Surveil => "surveil",
            Self::Suspect => "suspect",
            Self::Tap => "tap",
            Self::TimeTravel => "time travel",
            Self::Transform => "transform",
            Self::Treasure => "treasure",
            Self::Untap => "untap",
            Self::VentureIntoTheDungeon => "venture into the dungeon",
            Self::Vote => "vote",
        }
    }
}
impl std::fmt::Display for KeywordAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
impl KeywordAction {
    pub fn all() -> impl Iterator<Item = Self> {
        [
            Self::Abandon,
            Self::Activate,
            Self::Adapt,
            Self::Amass,
            Self::Assemble,
            Self::Attach,
            Self::Behold,
            Self::Bolster,
            Self::Cast,
            Self::Clash,
            Self::Cloak,
            Self::CollectEvidence,
            Self::Conjure,
            Self::Connive,
            Self::Convert,
            Self::Counter,
            Self::Create,
            Self::Destroy,
            Self::Detain,
            Self::Discard,
            Self::Discover,
            Self::Double,
            Self::Endure,
            Self::Exchange,
            Self::Exert,
            Self::Exile,
            Self::Explore,
            Self::Fateseal,
            Self::Fight,
            Self::Food,
            Self::Forage,
            Self::Goad,
            Self::Heist,
            Self::Incubate,
            Self::Investigate,
            Self::Learn,
            Self::Manifest,
            Self::ManifestDread,
            Self::Meld,
            Self::Mill,
            Self::Monstrosity,
            Self::OpenAnAttraction,
            Self::Planeswalk,
            Self::Play,
            Self::Plot,
            Self::Populate,
            Self::Proliferate,
            Self::Regenerate,
            Self::Reveal,
            Self::RoleToken,
            Self::RollToVisitYourAttractions,
            Self::Sacrifice,
            Self::Scry,
            Self::Seek,
            Self::SetInMotion,
            Self::Shuffle,
            Self::Support,
            Self::Surveil,
            Self::Suspect,
            Self::Tap,
            Self::TimeTravel,
            Self::Transform,
            Self::Treasure,
            Self::Untap,
            Self::VentureIntoTheDungeon,
            Self::Vote,
        ]
        .into_iter()
    }
}
