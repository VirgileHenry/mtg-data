#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum PlaneswalkerType {
    Abian,
    Ajani,
    Aminatou,
    Angrath,
    Arlinn,
    Ashiok,
    Bob,
    Bahamut,
    Basri,
    Bolas,
    Calix,
    Chandra,
    Comet,
    Dack,
    Dakkon,
    Daretti,
    Davriel,
    Deb,
    Dihada,
    Domri,
    Dovin,
    Duck,
    Dungeon,
    Ellywick,
    Elminster,
    Elspeth,
    Equipment,
    Ersta,
    Estrid,
    Freyalise,
    Garruk,
    Gideon,
    Grist,
    Guff,
    Huatli,
    Inzerva,
    Jace,
    Jared,
    Jaya,
    Jeska,
    Kaito,
    Karn,
    Kasmina,
    Kaya,
    Kiora,
    Koth,
    Liliana,
    Lolth,
    Lukka,
    Luxior,
    Master,
    Minsc,
    Mordenkainen,
    Nahiri,
    Narset,
    Niko,
    Nissa,
    Nixilis,
    Oko,
    Quintorius,
    Ral,
    Rowan,
    Saheeli,
    Samut,
    Sarkhan,
    Serra,
    Sivitri,
    Sorin,
    Svega,
    Szat,
    Tamiyo,
    Tasha,
    Teferi,
    Teyo,
    Tezzeret,
    Tibalt,
    Tyvar,
    Ugin,
    Urza,
    Venser,
    Vivien,
    Vraska,
    Vronos,
    Wanderer,
    Will,
    Windgrace,
    Wrenn,
    Xenagos,
    Yanggu,
    Yanling,
    Zariel,
}
impl std::str::FromStr for PlaneswalkerType {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "abian" => Ok(Self::Abian),
            "ajani" => Ok(Self::Ajani),
            "aminatou" => Ok(Self::Aminatou),
            "angrath" => Ok(Self::Angrath),
            "arlinn" => Ok(Self::Arlinn),
            "ashiok" => Ok(Self::Ashiok),
            "b.o.b." => Ok(Self::Bob),
            "bahamut" => Ok(Self::Bahamut),
            "basri" => Ok(Self::Basri),
            "bolas" => Ok(Self::Bolas),
            "calix" => Ok(Self::Calix),
            "chandra" => Ok(Self::Chandra),
            "comet" => Ok(Self::Comet),
            "dack" => Ok(Self::Dack),
            "dakkon" => Ok(Self::Dakkon),
            "daretti" => Ok(Self::Daretti),
            "davriel" => Ok(Self::Davriel),
            "deb" => Ok(Self::Deb),
            "dihada" => Ok(Self::Dihada),
            "domri" => Ok(Self::Domri),
            "dovin" => Ok(Self::Dovin),
            "duck" => Ok(Self::Duck),
            "dungeon" => Ok(Self::Dungeon),
            "ellywick" => Ok(Self::Ellywick),
            "elminster" => Ok(Self::Elminster),
            "elspeth" => Ok(Self::Elspeth),
            "equipment" => Ok(Self::Equipment),
            "ersta" => Ok(Self::Ersta),
            "estrid" => Ok(Self::Estrid),
            "freyalise" => Ok(Self::Freyalise),
            "garruk" => Ok(Self::Garruk),
            "gideon" => Ok(Self::Gideon),
            "grist" => Ok(Self::Grist),
            "guff" => Ok(Self::Guff),
            "huatli" => Ok(Self::Huatli),
            "inzerva" => Ok(Self::Inzerva),
            "jace" => Ok(Self::Jace),
            "jared" => Ok(Self::Jared),
            "jaya" => Ok(Self::Jaya),
            "jeska" => Ok(Self::Jeska),
            "kaito" => Ok(Self::Kaito),
            "karn" => Ok(Self::Karn),
            "kasmina" => Ok(Self::Kasmina),
            "kaya" => Ok(Self::Kaya),
            "kiora" => Ok(Self::Kiora),
            "koth" => Ok(Self::Koth),
            "liliana" => Ok(Self::Liliana),
            "lolth" => Ok(Self::Lolth),
            "lukka" => Ok(Self::Lukka),
            "luxior" => Ok(Self::Luxior),
            "master" => Ok(Self::Master),
            "minsc" => Ok(Self::Minsc),
            "mordenkainen" => Ok(Self::Mordenkainen),
            "nahiri" => Ok(Self::Nahiri),
            "narset" => Ok(Self::Narset),
            "niko" => Ok(Self::Niko),
            "nissa" => Ok(Self::Nissa),
            "nixilis" => Ok(Self::Nixilis),
            "oko" => Ok(Self::Oko),
            "quintorius" => Ok(Self::Quintorius),
            "ral" => Ok(Self::Ral),
            "rowan" => Ok(Self::Rowan),
            "saheeli" => Ok(Self::Saheeli),
            "samut" => Ok(Self::Samut),
            "sarkhan" => Ok(Self::Sarkhan),
            "serra" => Ok(Self::Serra),
            "sivitri" => Ok(Self::Sivitri),
            "sorin" => Ok(Self::Sorin),
            "svega" => Ok(Self::Svega),
            "szat" => Ok(Self::Szat),
            "tamiyo" => Ok(Self::Tamiyo),
            "tasha" => Ok(Self::Tasha),
            "teferi" => Ok(Self::Teferi),
            "teyo" => Ok(Self::Teyo),
            "tezzeret" => Ok(Self::Tezzeret),
            "tibalt" => Ok(Self::Tibalt),
            "tyvar" => Ok(Self::Tyvar),
            "ugin" => Ok(Self::Ugin),
            "urza" => Ok(Self::Urza),
            "venser" => Ok(Self::Venser),
            "vivien" => Ok(Self::Vivien),
            "vraska" => Ok(Self::Vraska),
            "vronos" => Ok(Self::Vronos),
            "wanderer" => Ok(Self::Wanderer),
            "will" => Ok(Self::Will),
            "windgrace" => Ok(Self::Windgrace),
            "wrenn" => Ok(Self::Wrenn),
            "xenagos" => Ok(Self::Xenagos),
            "yanggu" => Ok(Self::Yanggu),
            "yanling" => Ok(Self::Yanling),
            "zariel" => Ok(Self::Zariel),
            other => Err(format!("Unknown PlaneswalkerType: {}", other.to_string())),
        }
    }
}
impl PlaneswalkerType {
    fn as_str(&self) -> &'static str {
        match self {
            Self::Abian => "abian",
            Self::Ajani => "ajani",
            Self::Aminatou => "aminatou",
            Self::Angrath => "angrath",
            Self::Arlinn => "arlinn",
            Self::Ashiok => "ashiok",
            Self::Bob => "b.o.b.",
            Self::Bahamut => "bahamut",
            Self::Basri => "basri",
            Self::Bolas => "bolas",
            Self::Calix => "calix",
            Self::Chandra => "chandra",
            Self::Comet => "comet",
            Self::Dack => "dack",
            Self::Dakkon => "dakkon",
            Self::Daretti => "daretti",
            Self::Davriel => "davriel",
            Self::Deb => "deb",
            Self::Dihada => "dihada",
            Self::Domri => "domri",
            Self::Dovin => "dovin",
            Self::Duck => "duck",
            Self::Dungeon => "dungeon",
            Self::Ellywick => "ellywick",
            Self::Elminster => "elminster",
            Self::Elspeth => "elspeth",
            Self::Equipment => "equipment",
            Self::Ersta => "ersta",
            Self::Estrid => "estrid",
            Self::Freyalise => "freyalise",
            Self::Garruk => "garruk",
            Self::Gideon => "gideon",
            Self::Grist => "grist",
            Self::Guff => "guff",
            Self::Huatli => "huatli",
            Self::Inzerva => "inzerva",
            Self::Jace => "jace",
            Self::Jared => "jared",
            Self::Jaya => "jaya",
            Self::Jeska => "jeska",
            Self::Kaito => "kaito",
            Self::Karn => "karn",
            Self::Kasmina => "kasmina",
            Self::Kaya => "kaya",
            Self::Kiora => "kiora",
            Self::Koth => "koth",
            Self::Liliana => "liliana",
            Self::Lolth => "lolth",
            Self::Lukka => "lukka",
            Self::Luxior => "luxior",
            Self::Master => "master",
            Self::Minsc => "minsc",
            Self::Mordenkainen => "mordenkainen",
            Self::Nahiri => "nahiri",
            Self::Narset => "narset",
            Self::Niko => "niko",
            Self::Nissa => "nissa",
            Self::Nixilis => "nixilis",
            Self::Oko => "oko",
            Self::Quintorius => "quintorius",
            Self::Ral => "ral",
            Self::Rowan => "rowan",
            Self::Saheeli => "saheeli",
            Self::Samut => "samut",
            Self::Sarkhan => "sarkhan",
            Self::Serra => "serra",
            Self::Sivitri => "sivitri",
            Self::Sorin => "sorin",
            Self::Svega => "svega",
            Self::Szat => "szat",
            Self::Tamiyo => "tamiyo",
            Self::Tasha => "tasha",
            Self::Teferi => "teferi",
            Self::Teyo => "teyo",
            Self::Tezzeret => "tezzeret",
            Self::Tibalt => "tibalt",
            Self::Tyvar => "tyvar",
            Self::Ugin => "ugin",
            Self::Urza => "urza",
            Self::Venser => "venser",
            Self::Vivien => "vivien",
            Self::Vraska => "vraska",
            Self::Vronos => "vronos",
            Self::Wanderer => "wanderer",
            Self::Will => "will",
            Self::Windgrace => "windgrace",
            Self::Wrenn => "wrenn",
            Self::Xenagos => "xenagos",
            Self::Yanggu => "yanggu",
            Self::Yanling => "yanling",
            Self::Zariel => "zariel",
        }
    }
}
impl std::fmt::Display for PlaneswalkerType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
impl PlaneswalkerType {
    pub fn all() -> impl Iterator<Item = Self> {
        [
            Self::Abian,
            Self::Ajani,
            Self::Aminatou,
            Self::Angrath,
            Self::Arlinn,
            Self::Ashiok,
            Self::Bob,
            Self::Bahamut,
            Self::Basri,
            Self::Bolas,
            Self::Calix,
            Self::Chandra,
            Self::Comet,
            Self::Dack,
            Self::Dakkon,
            Self::Daretti,
            Self::Davriel,
            Self::Deb,
            Self::Dihada,
            Self::Domri,
            Self::Dovin,
            Self::Duck,
            Self::Dungeon,
            Self::Ellywick,
            Self::Elminster,
            Self::Elspeth,
            Self::Equipment,
            Self::Ersta,
            Self::Estrid,
            Self::Freyalise,
            Self::Garruk,
            Self::Gideon,
            Self::Grist,
            Self::Guff,
            Self::Huatli,
            Self::Inzerva,
            Self::Jace,
            Self::Jared,
            Self::Jaya,
            Self::Jeska,
            Self::Kaito,
            Self::Karn,
            Self::Kasmina,
            Self::Kaya,
            Self::Kiora,
            Self::Koth,
            Self::Liliana,
            Self::Lolth,
            Self::Lukka,
            Self::Luxior,
            Self::Master,
            Self::Minsc,
            Self::Mordenkainen,
            Self::Nahiri,
            Self::Narset,
            Self::Niko,
            Self::Nissa,
            Self::Nixilis,
            Self::Oko,
            Self::Quintorius,
            Self::Ral,
            Self::Rowan,
            Self::Saheeli,
            Self::Samut,
            Self::Sarkhan,
            Self::Serra,
            Self::Sivitri,
            Self::Sorin,
            Self::Svega,
            Self::Szat,
            Self::Tamiyo,
            Self::Tasha,
            Self::Teferi,
            Self::Teyo,
            Self::Tezzeret,
            Self::Tibalt,
            Self::Tyvar,
            Self::Ugin,
            Self::Urza,
            Self::Venser,
            Self::Vivien,
            Self::Vraska,
            Self::Vronos,
            Self::Wanderer,
            Self::Will,
            Self::Windgrace,
            Self::Wrenn,
            Self::Xenagos,
            Self::Yanggu,
            Self::Yanling,
            Self::Zariel,
        ]
        .into_iter()
    }
}
