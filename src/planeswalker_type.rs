#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum PlaneswalkerType {
    Abian,
    Ajani,
    Aminatou,
    Angrath,
    Arlinn,
    Ashiok,
    Bob,
    Bahamut,
    Basri,
    Bolas,
    Calix,
    Chandra,
    Comet,
    Dack,
    Dakkon,
    Daretti,
    Davriel,
    Deb,
    Dihada,
    Domri,
    Dovin,
    Duck,
    Dungeon,
    Ellywick,
    Elminster,
    Elspeth,
    Equipment,
    Ersta,
    Estrid,
    Freyalise,
    Garruk,
    Gideon,
    Grist,
    Guff,
    Huatli,
    Inzerva,
    Jace,
    Jared,
    Jaya,
    Jeska,
    Kaito,
    Karn,
    Kasmina,
    Kaya,
    Kiora,
    Koth,
    Liliana,
    Lolth,
    Lukka,
    Luxior,
    Master,
    Minsc,
    Mordenkainen,
    Nahiri,
    Narset,
    Niko,
    Nissa,
    Nixilis,
    Oko,
    Quintorius,
    Ral,
    Rowan,
    Saheeli,
    Samut,
    Sarkhan,
    Serra,
    Sivitri,
    Sorin,
    Svega,
    Szat,
    Tamiyo,
    Tasha,
    Teferi,
    Teyo,
    Tezzeret,
    Tibalt,
    Tyvar,
    Ugin,
    Urza,
    Venser,
    Vivien,
    Vraska,
    Vronos,
    Wanderer,
    Will,
    Windgrace,
    Wrenn,
    Xenagos,
    Yanggu,
    Yanling,
    Zariel,
}

impl std::str::FromStr for PlaneswalkerType {
    type Err = crate::ParsingError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Abian" => Ok(Self::Abian),
            "Ajani" => Ok(Self::Ajani),
            "Aminatou" => Ok(Self::Aminatou),
            "Angrath" => Ok(Self::Angrath),
            "Arlinn" => Ok(Self::Arlinn),
            "Ashiok" => Ok(Self::Ashiok),
            "B.O.B." => Ok(Self::Bob),
            "Bahamut" => Ok(Self::Bahamut),
            "Basri" => Ok(Self::Basri),
            "Bolas" => Ok(Self::Bolas),
            "Calix" => Ok(Self::Calix),
            "Chandra" => Ok(Self::Chandra),
            "Comet" => Ok(Self::Comet),
            "Dack" => Ok(Self::Dack),
            "Dakkon" => Ok(Self::Dakkon),
            "Daretti" => Ok(Self::Daretti),
            "Davriel" => Ok(Self::Davriel),
            "Deb" => Ok(Self::Deb),
            "Dihada" => Ok(Self::Dihada),
            "Domri" => Ok(Self::Domri),
            "Dovin" => Ok(Self::Dovin),
            "Duck" => Ok(Self::Duck),
            "Dungeon" => Ok(Self::Dungeon),
            "Ellywick" => Ok(Self::Ellywick),
            "Elminster" => Ok(Self::Elminster),
            "Elspeth" => Ok(Self::Elspeth),
            "Equipment" => Ok(Self::Equipment),
            "Ersta" => Ok(Self::Ersta),
            "Estrid" => Ok(Self::Estrid),
            "Freyalise" => Ok(Self::Freyalise),
            "Garruk" => Ok(Self::Garruk),
            "Gideon" => Ok(Self::Gideon),
            "Grist" => Ok(Self::Grist),
            "Guff" => Ok(Self::Guff),
            "Huatli" => Ok(Self::Huatli),
            "Inzerva" => Ok(Self::Inzerva),
            "Jace" => Ok(Self::Jace),
            "Jared" => Ok(Self::Jared),
            "Jaya" => Ok(Self::Jaya),
            "Jeska" => Ok(Self::Jeska),
            "Kaito" => Ok(Self::Kaito),
            "Karn" => Ok(Self::Karn),
            "Kasmina" => Ok(Self::Kasmina),
            "Kaya" => Ok(Self::Kaya),
            "Kiora" => Ok(Self::Kiora),
            "Koth" => Ok(Self::Koth),
            "Liliana" => Ok(Self::Liliana),
            "Lolth" => Ok(Self::Lolth),
            "Lukka" => Ok(Self::Lukka),
            "Luxior" => Ok(Self::Luxior),
            "Master" => Ok(Self::Master),
            "Minsc" => Ok(Self::Minsc),
            "Mordenkainen" => Ok(Self::Mordenkainen),
            "Nahiri" => Ok(Self::Nahiri),
            "Narset" => Ok(Self::Narset),
            "Niko" => Ok(Self::Niko),
            "Nissa" => Ok(Self::Nissa),
            "Nixilis" => Ok(Self::Nixilis),
            "Oko" => Ok(Self::Oko),
            "Quintorius" => Ok(Self::Quintorius),
            "Ral" => Ok(Self::Ral),
            "Rowan" => Ok(Self::Rowan),
            "Saheeli" => Ok(Self::Saheeli),
            "Samut" => Ok(Self::Samut),
            "Sarkhan" => Ok(Self::Sarkhan),
            "Serra" => Ok(Self::Serra),
            "Sivitri" => Ok(Self::Sivitri),
            "Sorin" => Ok(Self::Sorin),
            "Svega" => Ok(Self::Svega),
            "Szat" => Ok(Self::Szat),
            "Tamiyo" => Ok(Self::Tamiyo),
            "Tasha" => Ok(Self::Tasha),
            "Teferi" => Ok(Self::Teferi),
            "Teyo" => Ok(Self::Teyo),
            "Tezzeret" => Ok(Self::Tezzeret),
            "Tibalt" => Ok(Self::Tibalt),
            "Tyvar" => Ok(Self::Tyvar),
            "Ugin" => Ok(Self::Ugin),
            "Urza" => Ok(Self::Urza),
            "Venser" => Ok(Self::Venser),
            "Vivien" => Ok(Self::Vivien),
            "Vraska" => Ok(Self::Vraska),
            "Vronos" => Ok(Self::Vronos),
            "Wanderer" => Ok(Self::Wanderer),
            "Will" => Ok(Self::Will),
            "Windgrace" => Ok(Self::Windgrace),
            "Wrenn" => Ok(Self::Wrenn),
            "Xenagos" => Ok(Self::Xenagos),
            "Yanggu" => Ok(Self::Yanggu),
            "Yanling" => Ok(Self::Yanling),
            "Zariel" => Ok(Self::Zariel),
            _ => Err(crate::ParsingError::UnknownInput { input: s.to_string() }),
        }
    }
}

impl std::fmt::Display for PlaneswalkerType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            Self::Abian => write!(f, "Abian"),
            Self::Ajani => write!(f, "Ajani"),
            Self::Aminatou => write!(f, "Aminatou"),
            Self::Angrath => write!(f, "Angrath"),
            Self::Arlinn => write!(f, "Arlinn"),
            Self::Ashiok => write!(f, "Ashiok"),
            Self::Bob => write!(f, "B.O.B."),
            Self::Bahamut => write!(f, "Bahamut"),
            Self::Basri => write!(f, "Basri"),
            Self::Bolas => write!(f, "Bolas"),
            Self::Calix => write!(f, "Calix"),
            Self::Chandra => write!(f, "Chandra"),
            Self::Comet => write!(f, "Comet"),
            Self::Dack => write!(f, "Dack"),
            Self::Dakkon => write!(f, "Dakkon"),
            Self::Daretti => write!(f, "Daretti"),
            Self::Davriel => write!(f, "Davriel"),
            Self::Deb => write!(f, "Deb"),
            Self::Dihada => write!(f, "Dihada"),
            Self::Domri => write!(f, "Domri"),
            Self::Dovin => write!(f, "Dovin"),
            Self::Duck => write!(f, "Duck"),
            Self::Dungeon => write!(f, "Dungeon"),
            Self::Ellywick => write!(f, "Ellywick"),
            Self::Elminster => write!(f, "Elminster"),
            Self::Elspeth => write!(f, "Elspeth"),
            Self::Equipment => write!(f, "Equipment"),
            Self::Ersta => write!(f, "Ersta"),
            Self::Estrid => write!(f, "Estrid"),
            Self::Freyalise => write!(f, "Freyalise"),
            Self::Garruk => write!(f, "Garruk"),
            Self::Gideon => write!(f, "Gideon"),
            Self::Grist => write!(f, "Grist"),
            Self::Guff => write!(f, "Guff"),
            Self::Huatli => write!(f, "Huatli"),
            Self::Inzerva => write!(f, "Inzerva"),
            Self::Jace => write!(f, "Jace"),
            Self::Jared => write!(f, "Jared"),
            Self::Jaya => write!(f, "Jaya"),
            Self::Jeska => write!(f, "Jeska"),
            Self::Kaito => write!(f, "Kaito"),
            Self::Karn => write!(f, "Karn"),
            Self::Kasmina => write!(f, "Kasmina"),
            Self::Kaya => write!(f, "Kaya"),
            Self::Kiora => write!(f, "Kiora"),
            Self::Koth => write!(f, "Koth"),
            Self::Liliana => write!(f, "Liliana"),
            Self::Lolth => write!(f, "Lolth"),
            Self::Lukka => write!(f, "Lukka"),
            Self::Luxior => write!(f, "Luxior"),
            Self::Master => write!(f, "Master"),
            Self::Minsc => write!(f, "Minsc"),
            Self::Mordenkainen => write!(f, "Mordenkainen"),
            Self::Nahiri => write!(f, "Nahiri"),
            Self::Narset => write!(f, "Narset"),
            Self::Niko => write!(f, "Niko"),
            Self::Nissa => write!(f, "Nissa"),
            Self::Nixilis => write!(f, "Nixilis"),
            Self::Oko => write!(f, "Oko"),
            Self::Quintorius => write!(f, "Quintorius"),
            Self::Ral => write!(f, "Ral"),
            Self::Rowan => write!(f, "Rowan"),
            Self::Saheeli => write!(f, "Saheeli"),
            Self::Samut => write!(f, "Samut"),
            Self::Sarkhan => write!(f, "Sarkhan"),
            Self::Serra => write!(f, "Serra"),
            Self::Sivitri => write!(f, "Sivitri"),
            Self::Sorin => write!(f, "Sorin"),
            Self::Svega => write!(f, "Svega"),
            Self::Szat => write!(f, "Szat"),
            Self::Tamiyo => write!(f, "Tamiyo"),
            Self::Tasha => write!(f, "Tasha"),
            Self::Teferi => write!(f, "Teferi"),
            Self::Teyo => write!(f, "Teyo"),
            Self::Tezzeret => write!(f, "Tezzeret"),
            Self::Tibalt => write!(f, "Tibalt"),
            Self::Tyvar => write!(f, "Tyvar"),
            Self::Ugin => write!(f, "Ugin"),
            Self::Urza => write!(f, "Urza"),
            Self::Venser => write!(f, "Venser"),
            Self::Vivien => write!(f, "Vivien"),
            Self::Vraska => write!(f, "Vraska"),
            Self::Vronos => write!(f, "Vronos"),
            Self::Wanderer => write!(f, "Wanderer"),
            Self::Will => write!(f, "Will"),
            Self::Windgrace => write!(f, "Windgrace"),
            Self::Wrenn => write!(f, "Wrenn"),
            Self::Xenagos => write!(f, "Xenagos"),
            Self::Yanggu => write!(f, "Yanggu"),
            Self::Yanling => write!(f, "Yanling"),
            Self::Zariel => write!(f, "Zariel"),
        }
    }
}

impl PlaneswalkerType {
    pub fn iter() -> impl Iterator<Item = Self> {
        [
            Self::Abian,
            Self::Ajani,
            Self::Aminatou,
            Self::Angrath,
            Self::Arlinn,
            Self::Ashiok,
            Self::Bob,
            Self::Bahamut,
            Self::Basri,
            Self::Bolas,
            Self::Calix,
            Self::Chandra,
            Self::Comet,
            Self::Dack,
            Self::Dakkon,
            Self::Daretti,
            Self::Davriel,
            Self::Deb,
            Self::Dihada,
            Self::Domri,
            Self::Dovin,
            Self::Duck,
            Self::Dungeon,
            Self::Ellywick,
            Self::Elminster,
            Self::Elspeth,
            Self::Equipment,
            Self::Ersta,
            Self::Estrid,
            Self::Freyalise,
            Self::Garruk,
            Self::Gideon,
            Self::Grist,
            Self::Guff,
            Self::Huatli,
            Self::Inzerva,
            Self::Jace,
            Self::Jared,
            Self::Jaya,
            Self::Jeska,
            Self::Kaito,
            Self::Karn,
            Self::Kasmina,
            Self::Kaya,
            Self::Kiora,
            Self::Koth,
            Self::Liliana,
            Self::Lolth,
            Self::Lukka,
            Self::Luxior,
            Self::Master,
            Self::Minsc,
            Self::Mordenkainen,
            Self::Nahiri,
            Self::Narset,
            Self::Niko,
            Self::Nissa,
            Self::Nixilis,
            Self::Oko,
            Self::Quintorius,
            Self::Ral,
            Self::Rowan,
            Self::Saheeli,
            Self::Samut,
            Self::Sarkhan,
            Self::Serra,
            Self::Sivitri,
            Self::Sorin,
            Self::Svega,
            Self::Szat,
            Self::Tamiyo,
            Self::Tasha,
            Self::Teferi,
            Self::Teyo,
            Self::Tezzeret,
            Self::Tibalt,
            Self::Tyvar,
            Self::Ugin,
            Self::Urza,
            Self::Venser,
            Self::Vivien,
            Self::Vraska,
            Self::Vronos,
            Self::Wanderer,
            Self::Will,
            Self::Windgrace,
            Self::Wrenn,
            Self::Xenagos,
            Self::Yanggu,
            Self::Yanling,
            Self::Zariel,
        ].into_iter()
    }
}
