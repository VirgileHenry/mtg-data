#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum AbilityWord {
    Adamant,
    Addendum,
    Alliance,
    Battalion,
    Bloodrush,
    Celebration,
    Channel,
    Chroma,
    Cohort,
    Constellation,
    Converge,
    Corrupted,
    CouncilsDilemma,
    Coven,
    Delirium,
    Descend,
    Domain,
    Eerie,
    Eminence,
    Enrage,
    FatefulHour,
    FathomlessDescent,
    Ferocious,
    Flurry,
    Formidable,
    Grandeur,
    Hellbent,
    HerosReward,
    Heroic,
    Imprint,
    Inspired,
    JoinForces,
    Kinfall,
    Kinship,
    Landfall,
    Landship,
    Legacy,
    Lieutenant,
    Magecraft,
    Metalcraft,
    Morbid,
    PackTactics,
    Paradox,
    Parley,
    Radiance,
    Raid,
    Rally,
    Renew,
    Revolt,
    SecretCouncil,
    SpellMastery,
    StartYourEngines,
    Strive,
    Survival,
    Sweep,
    Teamwork,
    TemptingOffer,
    Threshold,
    Underdog,
    Undergrowth,
    Valiant,
    Void,
    WillOfThePlaneswalkers,
    WillOfTheCouncil,
}
impl std::str::FromStr for AbilityWord {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Adamant" => Ok(Self::Adamant),
            "Addendum" => Ok(Self::Addendum),
            "Alliance" => Ok(Self::Alliance),
            "Battalion" => Ok(Self::Battalion),
            "Bloodrush" => Ok(Self::Bloodrush),
            "Celebration" => Ok(Self::Celebration),
            "Channel" => Ok(Self::Channel),
            "Chroma" => Ok(Self::Chroma),
            "Cohort" => Ok(Self::Cohort),
            "Constellation" => Ok(Self::Constellation),
            "Converge" => Ok(Self::Converge),
            "Corrupted" => Ok(Self::Corrupted),
            "Council's dilemma" => Ok(Self::CouncilsDilemma),
            "Coven" => Ok(Self::Coven),
            "Delirium" => Ok(Self::Delirium),
            "Descend" => Ok(Self::Descend),
            "Domain" => Ok(Self::Domain),
            "Eerie" => Ok(Self::Eerie),
            "Eminence" => Ok(Self::Eminence),
            "Enrage" => Ok(Self::Enrage),
            "Fateful hour" => Ok(Self::FatefulHour),
            "Fathomless descent" => Ok(Self::FathomlessDescent),
            "Ferocious" => Ok(Self::Ferocious),
            "Flurry" => Ok(Self::Flurry),
            "Formidable" => Ok(Self::Formidable),
            "Grandeur" => Ok(Self::Grandeur),
            "Hellbent" => Ok(Self::Hellbent),
            "Hero's Reward" => Ok(Self::HerosReward),
            "Heroic" => Ok(Self::Heroic),
            "Imprint" => Ok(Self::Imprint),
            "Inspired" => Ok(Self::Inspired),
            "Join forces" => Ok(Self::JoinForces),
            "Kinfall" => Ok(Self::Kinfall),
            "Kinship" => Ok(Self::Kinship),
            "Landfall" => Ok(Self::Landfall),
            "Landship" => Ok(Self::Landship),
            "Legacy" => Ok(Self::Legacy),
            "Lieutenant" => Ok(Self::Lieutenant),
            "Magecraft" => Ok(Self::Magecraft),
            "Metalcraft" => Ok(Self::Metalcraft),
            "Morbid" => Ok(Self::Morbid),
            "Pack tactics" => Ok(Self::PackTactics),
            "Paradox" => Ok(Self::Paradox),
            "Parley" => Ok(Self::Parley),
            "Radiance" => Ok(Self::Radiance),
            "Raid" => Ok(Self::Raid),
            "Rally" => Ok(Self::Rally),
            "Renew" => Ok(Self::Renew),
            "Revolt" => Ok(Self::Revolt),
            "Secret council" => Ok(Self::SecretCouncil),
            "Spell mastery" => Ok(Self::SpellMastery),
            "Start your engines!" => Ok(Self::StartYourEngines),
            "Strive" => Ok(Self::Strive),
            "Survival" => Ok(Self::Survival),
            "Sweep" => Ok(Self::Sweep),
            "Teamwork" => Ok(Self::Teamwork),
            "Tempting offer" => Ok(Self::TemptingOffer),
            "Threshold" => Ok(Self::Threshold),
            "Underdog" => Ok(Self::Underdog),
            "Undergrowth" => Ok(Self::Undergrowth),
            "Valiant" => Ok(Self::Valiant),
            "Void" => Ok(Self::Void),
            "Will of the Planeswalkers" => Ok(Self::WillOfThePlaneswalkers),
            "Will of the council" => Ok(Self::WillOfTheCouncil),
            other => Err(format!("Unknown AbilityWord: {}", other.to_string())),
        }
    }
}
impl AbilityWord {
    fn as_str(&self) -> &'static str {
        match self {
            Self::Adamant => "Adamant",
            Self::Addendum => "Addendum",
            Self::Alliance => "Alliance",
            Self::Battalion => "Battalion",
            Self::Bloodrush => "Bloodrush",
            Self::Celebration => "Celebration",
            Self::Channel => "Channel",
            Self::Chroma => "Chroma",
            Self::Cohort => "Cohort",
            Self::Constellation => "Constellation",
            Self::Converge => "Converge",
            Self::Corrupted => "Corrupted",
            Self::CouncilsDilemma => "Council's dilemma",
            Self::Coven => "Coven",
            Self::Delirium => "Delirium",
            Self::Descend => "Descend",
            Self::Domain => "Domain",
            Self::Eerie => "Eerie",
            Self::Eminence => "Eminence",
            Self::Enrage => "Enrage",
            Self::FatefulHour => "Fateful hour",
            Self::FathomlessDescent => "Fathomless descent",
            Self::Ferocious => "Ferocious",
            Self::Flurry => "Flurry",
            Self::Formidable => "Formidable",
            Self::Grandeur => "Grandeur",
            Self::Hellbent => "Hellbent",
            Self::HerosReward => "Hero's Reward",
            Self::Heroic => "Heroic",
            Self::Imprint => "Imprint",
            Self::Inspired => "Inspired",
            Self::JoinForces => "Join forces",
            Self::Kinfall => "Kinfall",
            Self::Kinship => "Kinship",
            Self::Landfall => "Landfall",
            Self::Landship => "Landship",
            Self::Legacy => "Legacy",
            Self::Lieutenant => "Lieutenant",
            Self::Magecraft => "Magecraft",
            Self::Metalcraft => "Metalcraft",
            Self::Morbid => "Morbid",
            Self::PackTactics => "Pack tactics",
            Self::Paradox => "Paradox",
            Self::Parley => "Parley",
            Self::Radiance => "Radiance",
            Self::Raid => "Raid",
            Self::Rally => "Rally",
            Self::Renew => "Renew",
            Self::Revolt => "Revolt",
            Self::SecretCouncil => "Secret council",
            Self::SpellMastery => "Spell mastery",
            Self::StartYourEngines => "Start your engines!",
            Self::Strive => "Strive",
            Self::Survival => "Survival",
            Self::Sweep => "Sweep",
            Self::Teamwork => "Teamwork",
            Self::TemptingOffer => "Tempting offer",
            Self::Threshold => "Threshold",
            Self::Underdog => "Underdog",
            Self::Undergrowth => "Undergrowth",
            Self::Valiant => "Valiant",
            Self::Void => "Void",
            Self::WillOfThePlaneswalkers => "Will of the Planeswalkers",
            Self::WillOfTheCouncil => "Will of the council",
        }
    }
}
impl std::fmt::Display for AbilityWord {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
impl AbilityWord {
    pub fn all() -> impl Iterator<Item = Self> {
        [
            Self::Adamant,
            Self::Addendum,
            Self::Alliance,
            Self::Battalion,
            Self::Bloodrush,
            Self::Celebration,
            Self::Channel,
            Self::Chroma,
            Self::Cohort,
            Self::Constellation,
            Self::Converge,
            Self::Corrupted,
            Self::CouncilsDilemma,
            Self::Coven,
            Self::Delirium,
            Self::Descend,
            Self::Domain,
            Self::Eerie,
            Self::Eminence,
            Self::Enrage,
            Self::FatefulHour,
            Self::FathomlessDescent,
            Self::Ferocious,
            Self::Flurry,
            Self::Formidable,
            Self::Grandeur,
            Self::Hellbent,
            Self::HerosReward,
            Self::Heroic,
            Self::Imprint,
            Self::Inspired,
            Self::JoinForces,
            Self::Kinfall,
            Self::Kinship,
            Self::Landfall,
            Self::Landship,
            Self::Legacy,
            Self::Lieutenant,
            Self::Magecraft,
            Self::Metalcraft,
            Self::Morbid,
            Self::PackTactics,
            Self::Paradox,
            Self::Parley,
            Self::Radiance,
            Self::Raid,
            Self::Rally,
            Self::Renew,
            Self::Revolt,
            Self::SecretCouncil,
            Self::SpellMastery,
            Self::StartYourEngines,
            Self::Strive,
            Self::Survival,
            Self::Sweep,
            Self::Teamwork,
            Self::TemptingOffer,
            Self::Threshold,
            Self::Underdog,
            Self::Undergrowth,
            Self::Valiant,
            Self::Void,
            Self::WillOfThePlaneswalkers,
            Self::WillOfTheCouncil,
        ]
        .into_iter()
    }
}
