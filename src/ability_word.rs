#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum AbilityWord {
    Adamant,
    Addendum,
    Alliance,
    Battalion,
    Bloodrush,
    Celebration,
    Channel,
    Chroma,
    Cohort,
    Constellation,
    Converge,
    Corrupted,
    CouncilsDilemma,
    Coven,
    Delirium,
    Descend,
    Domain,
    Eerie,
    Eminence,
    Enrage,
    FatefulHour,
    FathomlessDescent,
    Ferocious,
    Flurry,
    Formidable,
    Grandeur,
    Hellbent,
    HerosReward,
    Heroic,
    Imprint,
    Inspired,
    JoinForces,
    Kinfall,
    Kinship,
    Landfall,
    Landship,
    Legacy,
    Lieutenant,
    Magecraft,
    Metalcraft,
    Morbid,
    PackTactics,
    Paradox,
    Parley,
    Radiance,
    Raid,
    Rally,
    Renew,
    Revolt,
    SecretCouncil,
    SpellMastery,
    StartYourEngines,
    Strive,
    Survival,
    Sweep,
    Teamwork,
    TemptingOffer,
    Threshold,
    Underdog,
    Undergrowth,
    Valiant,
    Void,
    WillOfThePlaneswalkers,
    WillOfTheCouncil,
}
impl std::str::FromStr for AbilityWord {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "adamant" => Ok(Self::Adamant),
            "addendum" => Ok(Self::Addendum),
            "alliance" => Ok(Self::Alliance),
            "battalion" => Ok(Self::Battalion),
            "bloodrush" => Ok(Self::Bloodrush),
            "celebration" => Ok(Self::Celebration),
            "channel" => Ok(Self::Channel),
            "chroma" => Ok(Self::Chroma),
            "cohort" => Ok(Self::Cohort),
            "constellation" => Ok(Self::Constellation),
            "converge" => Ok(Self::Converge),
            "corrupted" => Ok(Self::Corrupted),
            "council's dilemma" => Ok(Self::CouncilsDilemma),
            "coven" => Ok(Self::Coven),
            "delirium" => Ok(Self::Delirium),
            "descend" => Ok(Self::Descend),
            "domain" => Ok(Self::Domain),
            "eerie" => Ok(Self::Eerie),
            "eminence" => Ok(Self::Eminence),
            "enrage" => Ok(Self::Enrage),
            "fateful hour" => Ok(Self::FatefulHour),
            "fathomless descent" => Ok(Self::FathomlessDescent),
            "ferocious" => Ok(Self::Ferocious),
            "flurry" => Ok(Self::Flurry),
            "formidable" => Ok(Self::Formidable),
            "grandeur" => Ok(Self::Grandeur),
            "hellbent" => Ok(Self::Hellbent),
            "hero's reward" => Ok(Self::HerosReward),
            "heroic" => Ok(Self::Heroic),
            "imprint" => Ok(Self::Imprint),
            "inspired" => Ok(Self::Inspired),
            "join forces" => Ok(Self::JoinForces),
            "kinfall" => Ok(Self::Kinfall),
            "kinship" => Ok(Self::Kinship),
            "landfall" => Ok(Self::Landfall),
            "landship" => Ok(Self::Landship),
            "legacy" => Ok(Self::Legacy),
            "lieutenant" => Ok(Self::Lieutenant),
            "magecraft" => Ok(Self::Magecraft),
            "metalcraft" => Ok(Self::Metalcraft),
            "morbid" => Ok(Self::Morbid),
            "pack tactics" => Ok(Self::PackTactics),
            "paradox" => Ok(Self::Paradox),
            "parley" => Ok(Self::Parley),
            "radiance" => Ok(Self::Radiance),
            "raid" => Ok(Self::Raid),
            "rally" => Ok(Self::Rally),
            "renew" => Ok(Self::Renew),
            "revolt" => Ok(Self::Revolt),
            "secret council" => Ok(Self::SecretCouncil),
            "spell mastery" => Ok(Self::SpellMastery),
            "start your engines!" => Ok(Self::StartYourEngines),
            "strive" => Ok(Self::Strive),
            "survival" => Ok(Self::Survival),
            "sweep" => Ok(Self::Sweep),
            "teamwork" => Ok(Self::Teamwork),
            "tempting offer" => Ok(Self::TemptingOffer),
            "threshold" => Ok(Self::Threshold),
            "underdog" => Ok(Self::Underdog),
            "undergrowth" => Ok(Self::Undergrowth),
            "valiant" => Ok(Self::Valiant),
            "void" => Ok(Self::Void),
            "will of the planeswalkers" => Ok(Self::WillOfThePlaneswalkers),
            "will of the council" => Ok(Self::WillOfTheCouncil),
            other => Err(format!("Unknown AbilityWord: {}", other.to_string())),
        }
    }
}
impl AbilityWord {
    fn as_str(&self) -> &'static str {
        match self {
            Self::Adamant => "adamant",
            Self::Addendum => "addendum",
            Self::Alliance => "alliance",
            Self::Battalion => "battalion",
            Self::Bloodrush => "bloodrush",
            Self::Celebration => "celebration",
            Self::Channel => "channel",
            Self::Chroma => "chroma",
            Self::Cohort => "cohort",
            Self::Constellation => "constellation",
            Self::Converge => "converge",
            Self::Corrupted => "corrupted",
            Self::CouncilsDilemma => "council's dilemma",
            Self::Coven => "coven",
            Self::Delirium => "delirium",
            Self::Descend => "descend",
            Self::Domain => "domain",
            Self::Eerie => "eerie",
            Self::Eminence => "eminence",
            Self::Enrage => "enrage",
            Self::FatefulHour => "fateful hour",
            Self::FathomlessDescent => "fathomless descent",
            Self::Ferocious => "ferocious",
            Self::Flurry => "flurry",
            Self::Formidable => "formidable",
            Self::Grandeur => "grandeur",
            Self::Hellbent => "hellbent",
            Self::HerosReward => "hero's reward",
            Self::Heroic => "heroic",
            Self::Imprint => "imprint",
            Self::Inspired => "inspired",
            Self::JoinForces => "join forces",
            Self::Kinfall => "kinfall",
            Self::Kinship => "kinship",
            Self::Landfall => "landfall",
            Self::Landship => "landship",
            Self::Legacy => "legacy",
            Self::Lieutenant => "lieutenant",
            Self::Magecraft => "magecraft",
            Self::Metalcraft => "metalcraft",
            Self::Morbid => "morbid",
            Self::PackTactics => "pack tactics",
            Self::Paradox => "paradox",
            Self::Parley => "parley",
            Self::Radiance => "radiance",
            Self::Raid => "raid",
            Self::Rally => "rally",
            Self::Renew => "renew",
            Self::Revolt => "revolt",
            Self::SecretCouncil => "secret council",
            Self::SpellMastery => "spell mastery",
            Self::StartYourEngines => "start your engines!",
            Self::Strive => "strive",
            Self::Survival => "survival",
            Self::Sweep => "sweep",
            Self::Teamwork => "teamwork",
            Self::TemptingOffer => "tempting offer",
            Self::Threshold => "threshold",
            Self::Underdog => "underdog",
            Self::Undergrowth => "undergrowth",
            Self::Valiant => "valiant",
            Self::Void => "void",
            Self::WillOfThePlaneswalkers => "will of the planeswalkers",
            Self::WillOfTheCouncil => "will of the council",
        }
    }
}
impl std::fmt::Display for AbilityWord {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
impl AbilityWord {
    pub fn all() -> impl Iterator<Item = Self> {
        [
            Self::Adamant,
            Self::Addendum,
            Self::Alliance,
            Self::Battalion,
            Self::Bloodrush,
            Self::Celebration,
            Self::Channel,
            Self::Chroma,
            Self::Cohort,
            Self::Constellation,
            Self::Converge,
            Self::Corrupted,
            Self::CouncilsDilemma,
            Self::Coven,
            Self::Delirium,
            Self::Descend,
            Self::Domain,
            Self::Eerie,
            Self::Eminence,
            Self::Enrage,
            Self::FatefulHour,
            Self::FathomlessDescent,
            Self::Ferocious,
            Self::Flurry,
            Self::Formidable,
            Self::Grandeur,
            Self::Hellbent,
            Self::HerosReward,
            Self::Heroic,
            Self::Imprint,
            Self::Inspired,
            Self::JoinForces,
            Self::Kinfall,
            Self::Kinship,
            Self::Landfall,
            Self::Landship,
            Self::Legacy,
            Self::Lieutenant,
            Self::Magecraft,
            Self::Metalcraft,
            Self::Morbid,
            Self::PackTactics,
            Self::Paradox,
            Self::Parley,
            Self::Radiance,
            Self::Raid,
            Self::Rally,
            Self::Renew,
            Self::Revolt,
            Self::SecretCouncil,
            Self::SpellMastery,
            Self::StartYourEngines,
            Self::Strive,
            Self::Survival,
            Self::Sweep,
            Self::Teamwork,
            Self::TemptingOffer,
            Self::Threshold,
            Self::Underdog,
            Self::Undergrowth,
            Self::Valiant,
            Self::Void,
            Self::WillOfThePlaneswalkers,
            Self::WillOfTheCouncil,
        ]
        .into_iter()
    }
}
