#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum AbilityWord {
    Eerie,
    Battalion,
    Bloodrush,
    Channel,
    Chroma,
    Cohort,
    Constellation,
    Converge,
    Delirium,
    Domain,
    FatefulHour,
    Ferocious,
    Formidable,
    Grandeur,
    Hellbent,
    Heroic,
    Imprint,
    Inspired,
    JoinForces,
    Kinship,
    Landfall,
    Lieutenant,
    Metalcraft,
    Morbid,
    Parley,
    Radiance,
    Raid,
    Rally,
    SpellMastery,
    Strive,
    Sweep,
    TemptingOffer,
    Threshold,
    WillOfTheCouncil,
    Adamant,
    Addendum,
    CouncilsDilemma,
    Eminence,
    Enrage,
    HerosReward,
    Kinfall,
    Landship,
    Legacy,
    Revolt,
    Underdog,
    Undergrowth,
    Descend,
    FathomlessDescent,
    Magecraft,
    Teamwork,
    PackTactics,
    Coven,
    Alliance,
    Corrupted,
    SecretCouncil,
    Celebration,
    Paradox,
    WillOfThePlaneswalkers,
    Survival,
    Valiant,
}

impl std::str::FromStr for AbilityWord {
    type Err = crate::ParsingError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Eerie" => Ok(Self::Eerie),
            "Battalion" => Ok(Self::Battalion),
            "Bloodrush" => Ok(Self::Bloodrush),
            "Channel" => Ok(Self::Channel),
            "Chroma" => Ok(Self::Chroma),
            "Cohort" => Ok(Self::Cohort),
            "Constellation" => Ok(Self::Constellation),
            "Converge" => Ok(Self::Converge),
            "Delirium" => Ok(Self::Delirium),
            "Domain" => Ok(Self::Domain),
            "Fateful hour" => Ok(Self::FatefulHour),
            "Ferocious" => Ok(Self::Ferocious),
            "Formidable" => Ok(Self::Formidable),
            "Grandeur" => Ok(Self::Grandeur),
            "Hellbent" => Ok(Self::Hellbent),
            "Heroic" => Ok(Self::Heroic),
            "Imprint" => Ok(Self::Imprint),
            "Inspired" => Ok(Self::Inspired),
            "Join forces" => Ok(Self::JoinForces),
            "Kinship" => Ok(Self::Kinship),
            "Landfall" => Ok(Self::Landfall),
            "Lieutenant" => Ok(Self::Lieutenant),
            "Metalcraft" => Ok(Self::Metalcraft),
            "Morbid" => Ok(Self::Morbid),
            "Parley" => Ok(Self::Parley),
            "Radiance" => Ok(Self::Radiance),
            "Raid" => Ok(Self::Raid),
            "Rally" => Ok(Self::Rally),
            "Spell mastery" => Ok(Self::SpellMastery),
            "Strive" => Ok(Self::Strive),
            "Sweep" => Ok(Self::Sweep),
            "Tempting offer" => Ok(Self::TemptingOffer),
            "Threshold" => Ok(Self::Threshold),
            "Will of the council" => Ok(Self::WillOfTheCouncil),
            "Adamant" => Ok(Self::Adamant),
            "Addendum" => Ok(Self::Addendum),
            "Council's dilemma" => Ok(Self::CouncilsDilemma),
            "Eminence" => Ok(Self::Eminence),
            "Enrage" => Ok(Self::Enrage),
            "Hero's Reward" => Ok(Self::HerosReward),
            "Kinfall" => Ok(Self::Kinfall),
            "Landship" => Ok(Self::Landship),
            "Legacy" => Ok(Self::Legacy),
            "Revolt" => Ok(Self::Revolt),
            "Underdog" => Ok(Self::Underdog),
            "Undergrowth" => Ok(Self::Undergrowth),
            "Descend" => Ok(Self::Descend),
            "Fathomless descent" => Ok(Self::FathomlessDescent),
            "Magecraft" => Ok(Self::Magecraft),
            "Teamwork" => Ok(Self::Teamwork),
            "Pack tactics" => Ok(Self::PackTactics),
            "Coven" => Ok(Self::Coven),
            "Alliance" => Ok(Self::Alliance),
            "Corrupted" => Ok(Self::Corrupted),
            "Secret council" => Ok(Self::SecretCouncil),
            "Celebration" => Ok(Self::Celebration),
            "Paradox" => Ok(Self::Paradox),
            "Will of the Planeswalkers" => Ok(Self::WillOfThePlaneswalkers),
            "Survival" => Ok(Self::Survival),
            "Valiant" => Ok(Self::Valiant),
            _ => Err(crate::ParsingError::UnknownInput { input: s.to_string() }),
        }
    }
}

impl std::fmt::Display for AbilityWord {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            Self::Eerie => write!(f, "Eerie"),
            Self::Battalion => write!(f, "Battalion"),
            Self::Bloodrush => write!(f, "Bloodrush"),
            Self::Channel => write!(f, "Channel"),
            Self::Chroma => write!(f, "Chroma"),
            Self::Cohort => write!(f, "Cohort"),
            Self::Constellation => write!(f, "Constellation"),
            Self::Converge => write!(f, "Converge"),
            Self::Delirium => write!(f, "Delirium"),
            Self::Domain => write!(f, "Domain"),
            Self::FatefulHour => write!(f, "Fateful hour"),
            Self::Ferocious => write!(f, "Ferocious"),
            Self::Formidable => write!(f, "Formidable"),
            Self::Grandeur => write!(f, "Grandeur"),
            Self::Hellbent => write!(f, "Hellbent"),
            Self::Heroic => write!(f, "Heroic"),
            Self::Imprint => write!(f, "Imprint"),
            Self::Inspired => write!(f, "Inspired"),
            Self::JoinForces => write!(f, "Join forces"),
            Self::Kinship => write!(f, "Kinship"),
            Self::Landfall => write!(f, "Landfall"),
            Self::Lieutenant => write!(f, "Lieutenant"),
            Self::Metalcraft => write!(f, "Metalcraft"),
            Self::Morbid => write!(f, "Morbid"),
            Self::Parley => write!(f, "Parley"),
            Self::Radiance => write!(f, "Radiance"),
            Self::Raid => write!(f, "Raid"),
            Self::Rally => write!(f, "Rally"),
            Self::SpellMastery => write!(f, "Spell mastery"),
            Self::Strive => write!(f, "Strive"),
            Self::Sweep => write!(f, "Sweep"),
            Self::TemptingOffer => write!(f, "Tempting offer"),
            Self::Threshold => write!(f, "Threshold"),
            Self::WillOfTheCouncil => write!(f, "Will of the council"),
            Self::Adamant => write!(f, "Adamant"),
            Self::Addendum => write!(f, "Addendum"),
            Self::CouncilsDilemma => write!(f, "Council's dilemma"),
            Self::Eminence => write!(f, "Eminence"),
            Self::Enrage => write!(f, "Enrage"),
            Self::HerosReward => write!(f, "Hero's Reward"),
            Self::Kinfall => write!(f, "Kinfall"),
            Self::Landship => write!(f, "Landship"),
            Self::Legacy => write!(f, "Legacy"),
            Self::Revolt => write!(f, "Revolt"),
            Self::Underdog => write!(f, "Underdog"),
            Self::Undergrowth => write!(f, "Undergrowth"),
            Self::Descend => write!(f, "Descend"),
            Self::FathomlessDescent => write!(f, "Fathomless descent"),
            Self::Magecraft => write!(f, "Magecraft"),
            Self::Teamwork => write!(f, "Teamwork"),
            Self::PackTactics => write!(f, "Pack tactics"),
            Self::Coven => write!(f, "Coven"),
            Self::Alliance => write!(f, "Alliance"),
            Self::Corrupted => write!(f, "Corrupted"),
            Self::SecretCouncil => write!(f, "Secret council"),
            Self::Celebration => write!(f, "Celebration"),
            Self::Paradox => write!(f, "Paradox"),
            Self::WillOfThePlaneswalkers => write!(f, "Will of the Planeswalkers"),
            Self::Survival => write!(f, "Survival"),
            Self::Valiant => write!(f, "Valiant"),
        }
    }
}

impl AbilityWord {
    pub fn iter() -> impl Iterator<Item = Self> {
        [
            Self::Eerie,
            Self::Battalion,
            Self::Bloodrush,
            Self::Channel,
            Self::Chroma,
            Self::Cohort,
            Self::Constellation,
            Self::Converge,
            Self::Delirium,
            Self::Domain,
            Self::FatefulHour,
            Self::Ferocious,
            Self::Formidable,
            Self::Grandeur,
            Self::Hellbent,
            Self::Heroic,
            Self::Imprint,
            Self::Inspired,
            Self::JoinForces,
            Self::Kinship,
            Self::Landfall,
            Self::Lieutenant,
            Self::Metalcraft,
            Self::Morbid,
            Self::Parley,
            Self::Radiance,
            Self::Raid,
            Self::Rally,
            Self::SpellMastery,
            Self::Strive,
            Self::Sweep,
            Self::TemptingOffer,
            Self::Threshold,
            Self::WillOfTheCouncil,
            Self::Adamant,
            Self::Addendum,
            Self::CouncilsDilemma,
            Self::Eminence,
            Self::Enrage,
            Self::HerosReward,
            Self::Kinfall,
            Self::Landship,
            Self::Legacy,
            Self::Revolt,
            Self::Underdog,
            Self::Undergrowth,
            Self::Descend,
            Self::FathomlessDescent,
            Self::Magecraft,
            Self::Teamwork,
            Self::PackTactics,
            Self::Coven,
            Self::Alliance,
            Self::Corrupted,
            Self::SecretCouncil,
            Self::Celebration,
            Self::Paradox,
            Self::WillOfThePlaneswalkers,
            Self::Survival,
            Self::Valiant,
        ].into_iter()
    }
}
